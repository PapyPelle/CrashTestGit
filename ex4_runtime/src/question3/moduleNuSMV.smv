-- PLZ read the notes from the .txt document in the same folder --

MODULE main

VAR
  at_e : boolean;
  at_w : boolean; 

  on_bridge : boolean;
  w_light : {green, red};
  e_light : {green, red};

  t : 1 .. 3;
  prio : boolean;
  global_light : {west, east, none};

ASSIGN
  init(t) := 1;
  init(prio) := FALSE;
  init(global_light) := none;
  init(w_light) := red;
  init(e_light) := red;

  init(at_w) := FALSE;
  init(at_e) := FALSE;
  init(on_bridge) := FALSE;
  
  next(t) := case
    !(global_light = none) & (t < 3) : t + 1;
    TRUE : 1;
    esac;

  next(global_light) := case
    (global_light = none) : case
      !on_bridge : case
        at_w & (at_e -> prio) : west;
        at_e : east;
        TRUE : none;
        esac;
      TRUE : none;
      esac;
    TRUE : case
      (t = 3) : case
        !on_bridge : case
          at_w & (global_light = east) : west;
          at_e & (global_light = west) : east;
          TRUE : none;
          esac;
        TRUE : none;
        esac;
      TRUE : global_light;
      esac;
    esac;
  
  next(prio) := case
    (global_light = east) : TRUE;
    (global_light = west) : FALSE;
    TRUE : prio;
    esac;
    
  next(at_w) := case
    at_w & !(global_light = west) : TRUE;
    TRUE : {TRUE, FALSE};
    esac;
  
  next(at_e) := case
    at_e & !(global_light = east) : TRUE;
    TRUE : {TRUE, FALSE};
    esac;
  
  next(on_bridge) := case
    (global_light = east & at_e) | (global_light = west & at_w) : TRUE;
    TRUE : FALSE;
    esac;
  
  next(w_light) := case
    (next(global_light) = west) : green;
    TRUE : red;
    esac;

  next(e_light) := case
    (next(global_light) = east) : green;
    TRUE : red;
    esac;
     



/-- The two lights are never green at the same time --/
LTLSPEC
    G ( !((w_light = green) & (e_light = green)) );

/-- A light remains green only for 3 successive states --/
LTLSPEC (
    G ( (w_light = red) & X(w_light = green) -> 
          (X X(w_light = green) & X X X(w_light = green) & X X X X(w_light = red)) )
  ) & (
    G ( (e_light = red) & X(e_light = green) -> 
          (X X(e_light = green) & X X X(e_light = green) & X X X X(e_light = red)) )
  );

/-- A light only turns green if a car is waiting and that there
is no one on the bridge --/
LTLSPEC (
    G ( ((w_light = red) & X(w_light = green)) -> (at_w & !on_bridge) )
  ) & (
    G ( ((e_light = red) & X(e_light = green)) -> (at_e & !on_bridge) )
  );

/-- If the light is green, a car at the corresponding intersection ends up
on the bridge in the following state --/
LTLSPEC (
    G ( ((w_light = green) & at_w) -> X(on_bridge) )
  ) & (
    G ( ((e_light = green) & at_e) -> X(on_bridge) )
  );


/-- A car does not wait indefinitely at a red light --/
CTLSPEC (
    AG ( at_e -> AF (e_light = green) )
  ) & (
    AG ( at_w -> AF (w_light = green) )
  );
/-- There is an execution where there never is a car --/
CTLSPEC
    EG ( (!at_w & !at_e) & !on_bridge );

